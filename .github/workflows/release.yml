name: Create Release

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
 
env:
  BUILD_ENVIRONMENT: GitHub
  
jobs:
  build:
    runs-on: windows-2019

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up cache for build
        uses: actions/cache@v4
        with:
          path: "${{github.workspace}}"
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4.3.1
        with:
          dotnet-version: "8.0.x"

      - name: Configure NuGet credentials
        run: |
          sed -i 's/MyName/${{ github.actor }}/g' nuget.config
          sed -i 's/MyPAT/${{ secrets.GITHUB_TOKEN }}/g' nuget.config

      - name: Restore dependencies
        run: dotnet restore "${{github.workspace}}/my-web-app.sln" --verbosity detailed

      - name: Build
        run: dotnet build "${{github.workspace}}/my-web-app.sln"  --no-restore --configuration Release

      - name: Test
        run: dotnet test "${{github.workspace}}/my-web-app.sln" --no-restore --logger:"junit;LogFilePath=${{ github.workspace }}/Testresults/test-results.xml"

      # create a test summary markdown file
      # if you don't specify an output file, it will automatically add
      # as a job summary. If you specify an output file, you have to
      # create your own step of adding it to the job summary. I am
      # intentionally doing that to show job summaries
      - name: Create test summary
        uses: test-summary/action@v2.4
        with:
          paths: ${{ github.workspace }}/Testresults/*.xml
          output: ${{ github.workspace }}/Testresults/summary.md
          show: "all"
        if: always()

      # I am adding the test results to the Job Summary
      - name: Add Test Results To Job Summary
        run: |
          echo "TEST RESULTS:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          cat "${{ github.workspace }}/Testresults/summary.md" >> $GITHUB_STEP_SUMMARY
        if: always()

      - name: Publish
        run: dotnet publish "${{github.workspace}}/my-web-app/my-web-app.csproj" -c Release -o mywebapp
  
      - name: Save build artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: "${{github.event.repository.name}}"
          path: mywebapp/
          if-no-files-found: error

      - name: Download build artifacts
        uses: actions/download-artifact@v4.3.0
        with:
          name: "${{github.event.repository.name}}"
          path: mywebapp/
          if-no-files-found: error  

      - name: List workspace contents
        run: ls -R

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release - build change file to track
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./mywebapp.zip
          asset_name: mywebapp.zip
          asset_content_type: application/zip
        
